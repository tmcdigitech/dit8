<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>8 DigiTech on TMC - 8 Digital Tech</title><link>https://tmcdigitech.github.io/dit8/</link><description>Recent content in 8 DigiTech on TMC - 8 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit8/index.xml" rel="self" type="application/rss+xml"/><item><title>Gem Catcher</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/gemCatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/gemCatcher/</guid><description> First program update() Adding a gem Collision and Random Keeping Score Mouse and Events Game Over Challenges</description></item><item><title>Python</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/python/</guid><description>If you are new to Python, here is an good interactive guide you can get started with:
Aposteriori: Introduction to Python</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/software/</guid><description>To control the LEGO Mindstorms robots running ev3dev, you will need to:
Open the Company Portal: Find and install Visual Studio Code (NOT Visual Studio Community): Install the EV3 MicroPython extension</description></item><item><title>Ninja Runner</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/ninjaRunner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/ninjaRunner/</guid><description> Infinite Runner Background Ninja Jumping Obstacles Keeping Score Game Over Challenges and Bugs</description></item><item><title>Pygame Zero</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/pygameZero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/pygameZero/</guid><description>Let&amp;rsquo;s get a simple game happening, a bit at a time, so you can see how you might go about it yourself.
All of these examples are complete programs, so make sure you copy them into Mu (or whatever editor you&amp;rsquo;re using) and run them as you go through this page.
Screen size Let&amp;rsquo;s start by setting the size of the screen.
1 2 3 4 5 6 import pgzrun WIDTH = 800 HEIGHT = 600 pgzrun.</description></item><item><title>Using the EV3</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/using/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/using/</guid><description>Taken from pybricks.com
Turning the EV3 Brick on and off Turn on the EV3 Brick by pressing the dark gray center button.
The boot process may take several minutes. While booting, the EV3 Brick status light turns orange and blinks intermittently, and you’ll see a lot of text on the EV3 screen. The EV3 Brick is ready for use when the status light turns green.
To turn the EV3 Brick off, open the shutdown menu with the back button, and then select Power Off using the center button, as shown in Figure 5.</description></item><item><title>Creating and running programs</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/programs/</guid><description>Taken from pybricks.com
Now that you’ve set up your computer and EV3 Brick, you’re ready to start writing programs.
To make it easier to create and manage your programs, let’s first have a quick look at how MicroPython projects and programs for your EV3 robots are organized.
Programs are organized into project folders, as shown in Figure 8. A project folder is a directory/folder on your computer that contains the main program (main.</description></item><item><title>Tanks</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/tankGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/tankGame/</guid><description> Battle City 1985 Tank Moving the tank Background and Walls Randomizing the Walls Blocking Movements Tank Cannon Destroying Walls One Enemy Enemy Bullets Many Enemies Winning and Losing</description></item><item><title>Chase game</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/chaseGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/chaseGame/</guid><description>Chase game</description></item><item><title>Structure of program</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/structure/</guid><description>For obscure, historical reasons, the first line must look exactly like this. If it doesn&amp;rsquo;t, your program won&amp;rsquo;t work at all. Accidentally adding a blank line above or a space before is a common reason your code will break.
1 #!/usr/bin/env pybricks-micropython The next lines are some explanatory text about what the program in this file does. It is a good habit to do this in Python, but your program will work if you don&amp;rsquo;t.</description></item><item><title>Maze game</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/mazeGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/mazeGame/</guid><description>Maze game
Introduces tile maps</description></item><item><title>Movement</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/movement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/movement/</guid><description>adapted from PyBricks
Set up Having to control the two motors independently to move our robot would involve a lot of maths and be annoying and prone to error. Instead, we can use the DriveBase class to make driving our robot around a lot simpler.
We still need to initialize the motors:
# Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) But then we write this to create our DriveBase:</description></item><item><title>Shooting game</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/shootingGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/shootingGame/</guid><description>Shooting game</description></item><item><title>Touch Sensor</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/touch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/touch/</guid><description>adapted from PyBricks Touch Sensor A sensor lets an EV3 program measure and collect data about is surroundings. The Touch Sensor can detect when the sensor’s red button has been pressed or released.
Example Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env pybricks-micropython from pybricks import ev3brick as brick from pybricks.</description></item><item><title>Racing game</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/racingGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/racingGame/</guid><description>Racing game</description></item><item><title>Color Sensor</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/color/</guid><description>adapted from PyBricks Color Sensor In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours. A sensor lets an EV3 program measure and collect data about is surroundings. The Color Sensor can detect color and reflected light.
Three modes: Color, Reflected Light intensity and Ambient Light intensity.
– Color Mode: Recognizes 7 colors (black, brown, blue, green, yellow, red, white) and No Color</description></item><item><title>Flowcharts</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/flowcharts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/flowcharts/</guid><description>Flowcharts are a visual representation of program flow. A flowchart normally uses a combination of blocks and arrows to represent actions and sequence. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.
Start and End symbols are represented as rounded rectangles, usually containing the word &amp;ldquo;Star&amp;rdquo; or &amp;ldquo;End&amp;rdquo;, but can be more specific such as &amp;ldquo;Power Robot Off&amp;rdquo; or &amp;ldquo;Stop All Motors&amp;rdquo;.</description></item><item><title>Vertical shooter</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/verticalShooter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/verticalShooter/</guid><description> Twin Bee</description></item><item><title>More walk-throughs</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/moreTutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/moreTutorials/</guid><description>Simple Game Tutorials for Python and Pygame Zero 1.2</description></item><item><title>argument</title><link>https://tmcdigitech.github.io/dit8/glossary/argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/argument/</guid><description>When calling a function, the values given to it are called arguments. For example, in this case:
total = add(3, 4) 3 and 4 are arguments to the function add().
When defining a function, the pieces of information that the function takes to do its job are called parameters.</description></item><item><title>co-ordinate system</title><link>https://tmcdigitech.github.io/dit8/glossary/coordinate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/coordinate/</guid><description>In most programming environments (such as Pygame Zero), the screen co-ordinate system uses (x, y) co-ordinates, with the origin (0, 0) in the top left corner of the screen, with x to the right, and y going down.
Everything to be displayed on the screen must be rastered, which means rendered into a grid of colored pixels.</description></item><item><title>color/colour</title><link>https://tmcdigitech.github.io/dit8/glossary/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/color/</guid><description>In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.
For most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0-255. In Pygame Zero, we list these as a tuple (red, green, blue), such as:
(0, 150, 255) You can use the Google Color Picker to find different colors, and then copy the RGB value listed.</description></item><item><title>Enchanted Scepters</title><link>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/EnchantedScepters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/EnchantedScepters/</guid><description>by Silicon Beach Software (1984)
In this part-illustrated, part-text adventure, you are tasked with recovering four magical sceptres (earth, fire, wind and water, of course) to save your kingdom from invasion.</description></item><item><title>Iago</title><link>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/Iago/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/Iago/</guid><description>by David Reed (1984)
Iago was a very early Othello/Reversi game, which offered excellent gameplay. You could play against a friend or a computer with three levels of difficulty, on three different sizes of board.
It even has a special feature to hide the game if you are playing it at work and your boss is coming&amp;hellip;</description></item><item><title>parameter</title><link>https://tmcdigitech.github.io/dit8/glossary/parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/parameter/</guid><description>When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:
def add(first, second): return first + second first and second are the parameters of the function add().
When calling a function, the values given to it are called arguments.</description></item><item><title>Phrase Craze</title><link>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/PhraseCraze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/PhraseCraze/</guid><description>by Brad Pettit (1986)
Borrowing heavily from the TV game show Wheel of Fortune, Phrase Craze offers up to four players the chance to relive the thrill of being on the set, complete with game board, wheel, and charming host. You could also modify the PhraseFile to create your own puzzles.</description></item><item><title>Site URL 🡄🡆</title><link>https://tmcdigitech.github.io/dit8/teaching/siteUrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/teaching/siteUrl/</guid><description>Learn about Pygame Zero here:
https://tmcdigitech.github.io/dit8/</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit8/gameDesign/01gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/01gettingStarted/software/</guid><description>To develop games using Pygame Zero, you have two main options:
use Mu use another editor Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generaly very friendly to use and has a lot of features to help beginners get started.
After you have been writing code for a while, you may find that a standard Python environment and a &amp;ldquo;full&amp;rdquo; text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of doing some more basic things yourself.</description></item><item><title>Structuring your files</title><link>https://tmcdigitech.github.io/dit8/gameDesign/01gettingStarted/fileStructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/01gettingStarted/fileStructure/</guid><description>Each of your projects should live in its own folder somewhere sensible (like in a Digital Tech folder in your OneDrive!).
project/ ├── game.py │ ├── images/ │ ├── someImage.jpg │ ├── anotherImage.jpg │ └── ... # sprites, tiles and other image files │ ├── fonts/ │ └── ... # any font files │ ├── sounds/ │ └── ... # any sound files │ └── music/ └── ... # any music files You don&amp;rsquo;t need to have those folders unless you have something to put in them.</description></item><item><title>StuntCopter</title><link>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/StuntCopter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/StuntCopter/</guid><description>by Duane Blehm (1986)
Part of the genius of this game is how simple it is. Your aim is to drop people out of a helicopter onto the cart, carefully avoiding the rider and the horse. The further up you drop from, the more points you get. See what happens when you drop someone through the clouds&amp;hellip;
If you go to Options &amp;gt; OffScreen in the menu, you can also see the complete sprite sheet for the game; a nice touch.</description></item><item><title>tuple</title><link>https://tmcdigitech.github.io/dit8/glossary/tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/tuple/</guid><description>A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but in Pygame Zero we use them most often for colors (red, green, blue) and co-ordinates (x, y).</description></item><item><title>Why won't my program work?</title><link>https://tmcdigitech.github.io/dit8/troubleshooting/01whybroken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/troubleshooting/01whybroken/</guid><description>Here is a checklist of things to look for if something is wrong&amp;hellip;
Spelling and Capitalisation Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.</description></item></channel></rss>