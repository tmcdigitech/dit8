<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>8 DigiTech on TMC - 8 Digital Tech</title><link>https://tmcdigitech.github.io/dit8/</link><description>Recent content in 8 DigiTech on TMC - 8 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit8/index.xml" rel="self" type="application/rss+xml"/><item><title>Gem Catcher</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/gemCatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/gemCatcher/</guid><description> First program update() Adding a gem Collision and Random Keeping Score Mouse and Events Game Over Challenges</description></item><item><title>R5: Follow the line</title><link>https://tmcdigitech.github.io/dit8/assessment/followTheLine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/assessment/followTheLine/</guid><description>In teams (of up to 2), design algorithms using flowcharts to create an automated, driverless vehicle that can stop at line and follow a line. Explore how an automated vehicle might be guided along a road or track and how line detection could be used to save lives. Design ways to improve driving safety by helping to prevent drivers from falling asleep and causing an accident.
Task Description You will need to complete all the following sections as part of your collaborative presentation:</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/software/</guid><description>To control the LEGO Mindstorms robots running ev3dev, you will need to:
Open the Company Portal: Find and install Visual Studio Code (NOT Visual Studio Community): Install the EV3 MicroPython extension</description></item><item><title>FTL help</title><link>https://tmcdigitech.github.io/dit8/robotics/assessments/followTheLineCheat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/assessments/followTheLineCheat/</guid><description>Part 1 from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port from pybricks.robotics import DriveBase from pybricks.tools import wait from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor, InfraredSensor, UltrasonicSensor, GyroSensor) # Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the Touch Sensor. # touch_sensor = TouchSensor(Port.S1) # Initialize the Colour Sensor. color_sensor = ColorSensor(Port.S3) # Initialize the ultrasonic sensor.</description></item><item><title>Ninja Runner</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/ninjaRunner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/ninjaRunner/</guid><description> Infinite Runner Background Ninja Jumping Obstacles Keeping Score Game Over Challenges and Bugs</description></item><item><title>Using the EV3</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/using/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/using/</guid><description>Taken from pybricks.com
Turning the EV3 Brick on and off Turn on the EV3 Brick by pressing the dark gray center button.
The boot process may take several minutes. While booting, the EV3 Brick status light turns orange and blinks intermittently, and you’ll see a lot of text on the EV3 screen. The EV3 Brick is ready for use when the status light turns green.
To turn the EV3 Brick off, open the shutdown menu with the back button, and then select Power Off using the center button, as shown in Figure 5.</description></item><item><title>Creating and running programs</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/programs/</guid><description>Taken from pybricks.com
Now that you’ve set up your computer and EV3 Brick, you’re ready to start writing programs.
To make it easier to create and manage your programs, let’s first have a quick look at how MicroPython projects and programs for your EV3 robots are organized.
Programs are organized into project folders, as shown in Figure 8. A project folder is a directory/folder on your computer that contains the main program (main.</description></item><item><title>R6: Obstacle Course</title><link>https://tmcdigitech.github.io/dit8/assessment/obstacleCourse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/assessment/obstacleCourse/</guid><description>In teams of two, you will design algorithms using flowcharts to create an automated, driverless vehicle that can navigate an obstacle course. You will then adapt your code to use a touch sensor and an ultrasonic sensor to complete the same course, and make comparisons between the solutions.
This challenge features a sequence of turns that the robot must perform in order to get to the &amp;ldquo;end&amp;rdquo; of the course. The robot must begin at the starting point and get to the goal area by completing turning and forward movement behaviours.</description></item><item><title>Tanks</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/tankGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/tankGame/</guid><description> Battle City 1985 Tank Moving the tank Background and Walls Randomizing the Walls Blocking Movements Tank Cannon Destroying Walls One Enemy Enemy Bullets Many Enemies Winning and Losing</description></item><item><title>Chase game</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/chaseGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/chaseGame/</guid><description>Chase game</description></item><item><title>R7: Explorer Project</title><link>https://tmcdigitech.github.io/dit8/assessment/robotExplorer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/assessment/robotExplorer/</guid><description>Project Brief Within many fields such as the military, search and rescue, mining and space exploration scientists have been working on autonomous robots they may be used to carry out tasks where it is not safe for people to work. Your team&amp;rsquo;s task is to design and program an autonomous robot that can explore and navigate its way around a room by avoiding walls and other obstacles before running into them.</description></item><item><title>Structure of program</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/structure/</guid><description>For obscure, historical reasons, the first line must look exactly like this. If it doesn&amp;rsquo;t, your program won&amp;rsquo;t work at all. Accidentally adding a blank line above or a space before is a common reason your code will break.
1 #!/usr/bin/env pybricks-micropython The next lines are some explanatory text about what the program in this file does. It is a good habit to do this in Python, but your program will work if you don&amp;rsquo;t.</description></item><item><title>Maze game</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/mazeGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/mazeGame/</guid><description>Maze game
Introduces tile maps</description></item><item><title>Movement</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/movement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/movement/</guid><description>adapted from PyBricks
Set up Having to control the two motors independently to move our robot would involve a lot of maths and be annoying and prone to error. Instead, we can use the DriveBase class to make driving our robot around a lot simpler.
We still need to initialize the motors:
# Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) But then we write this to create our DriveBase:</description></item><item><title>Shooting game</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/shootingGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/shootingGame/</guid><description>Shooting game</description></item><item><title>Touch Sensor</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/touch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/touch/</guid><description>adapted from PyBricks Touch Sensor A sensor lets an EV3 program measure and collect data about its surroundings. The Touch Sensor detects when its red button has been pressed or released.
Example Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env pybricks-micropython from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.</description></item><item><title>Ultrasonic Sensor</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/ultrasonic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/ultrasonic/</guid><description>adapted from PyBricks Ultrasonic Sensor The Ultrasonic Sensor is digital sensor that can measure the distance to an Object in front of it. It does this by sending out hight frequency sound waves and measuring how long it takes the sound to reflect back to the sensor. The sound frequency is too high for you to hear. Distance to an object is measured in millimeters (mm). This allows you to program your robot to stop at a certain distance from a wall.</description></item><item><title>Racing game</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/racingGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/racingGame/</guid><description>Racing game</description></item><item><title>Color Sensor</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/color/</guid><description>adapted from PyBricks Color Sensor In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours. A sensor lets an EV3 program measure and collect data about is surroundings. The Color Sensor can detect color and reflected light.
Three modes: Color, Reflected Light intensity and Ambient Light intensity.
– Color Mode: Recognizes 7 colors (black, brown, blue, green, yellow, red, white) and No Color</description></item><item><title>Flowcharts</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/flowcharts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/flowcharts/</guid><description>Flowcharts are a visual representation of program flow. A flowchart normally uses a combination of blocks and arrows to represent actions and sequence. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.
Start and End symbols are represented as rounded rectangles, usually containing the word &amp;ldquo;Star&amp;rdquo; or &amp;ldquo;End&amp;rdquo;, but can be more specific such as &amp;ldquo;Power Robot Off&amp;rdquo; or &amp;ldquo;Stop All Motors&amp;rdquo;.</description></item><item><title>Programming Constructs</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/constructs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/constructs/</guid><description>Programs are designed using common building blocks. These building blocks, known as programming constructs (or programming concepts), form the basis for all programs.
There are three basic building blocks to consider:
sequence is the order in which instructions occur and are processed selection determines which path a program takes when it is running iteration is the repeated execution of a section of code when a program is running Sequence Sequence is the order in which programming statements are executed.</description></item><item><title>G1: Animal Quiz</title><link>https://tmcdigitech.github.io/dit8/assessment/animalQuiz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/assessment/animalQuiz/</guid><description>Are you a fan of quizzes? Would you like to make one yourself? In this project, you’ll build an animal quiz. Even though the questions are about animals, this project can be easily modified to be about any other topic.
In this example, you&amp;rsquo;ll see bits of code with annotations. The code in black is new code to be added. The code in grey is existing code; use this to work out where to add the new lines of code.</description></item><item><title>What is state?</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02state/stateWhatIs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02state/stateWhatIs/</guid><description>What is state? Imagine you are enjoying a particularly engaging session of Uno with some friends, and by a peculiar set of circumstances you are required to pack up the game back into its pack, but you and your friends want to be able to resume exactly where you are when you next meet. What would you have to record so that you can restore the game exactly as it is right now?</description></item><item><title>G2: My First 2D Game</title><link>https://tmcdigitech.github.io/dit8/assessment/first2Dgame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/assessment/first2Dgame/</guid><description>Using the examples worked through in class, you will need to develop the game to have the following features working:
Player movement Collectables Score Collision Events Code with internal comments To Be Successful Include all the above items in your game and complete by the due date. Include comments with all your Python code Use appropriate programming structures (selection and iteration) Purpose Students will be guided through the programming skills and techniques required to complete their final Game Design Project.</description></item><item><title>Reacting to and changing state</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02state/stateReacting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02state/stateReacting/</guid><description>In all computer games, the game proceeds a teeny bit at a time, with each of the agents in the game making decisions about what to do next based on the current state, which then changes the game state, and then the agents all make a new set of decisions, and the game state changes again. From outside this can appear as a smooth, seamless and continuous process, but it is always made of little, discrete moves.</description></item><item><title>Text-based quiz games</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/textBasedGames/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/textBasedGames/</guid><description>from Coding Games with Pygame Zero &amp;amp; Python, by Richard Smith
These programs can be entered using any text editor, but I suggest using the Mu editor because it comes with Python, Pygame Zero and other libraries all pre-installed in one easy download.
3.1. Hello, world The traditional first program used to make sure Python is working and that we can run programs.
If using the Mu editor:
Click the mode button and make sure the mode is set to Python3.</description></item><item><title>Vertical shooter</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/verticalShooter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/verticalShooter/</guid><description> Twin Bee</description></item><item><title>Drawing graphics</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/graphics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/graphics/</guid><description>adapted from Coding Games with Pygame Zero &amp;amp; Python, by Richard Smith
To create graphics for our games we will use the Pygame Zero library. You will find the documentation on the website useful!
The smallest square that can be displayed on a monitor is called a pixel. This diagram shows a close-up view of a window that is 40 pixels wide and 40 pixels high. At normal size you will not see the grid lines.</description></item><item><title>Problems with state</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02state/stateProblems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02state/stateProblems/</guid><description>Keep it simple Broadly speaking, the more state your program has, the more complex it is, and thus the more opportunities there are for mistakes. This should encourage us to look for a solution with as little state information as possible. As a simple example, in a fighting game, it is important to know whether a character is alive or dead, and how much health they have. So you might think to have an integer to keep track of health, and a couple of boolean flags to keep track of the character&amp;rsquo;s life status:</description></item><item><title>Arcade games</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/arcade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/arcade/</guid><description>adapted from Coding Games with Pygame Zero &amp;amp; Python, by Richard Smith
Keyboard input The alien moves when you press the cursor keys.
Program 4.5 Keyboard input
1 2 3 4 5 6 7 8 9 10 11 12 alien = Actor(&amp;#39;alien&amp;#39;) alien.pos = (0, 50) def draw(): screen.clear() alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 Exercise Make the alien move up and down as well as left and right.</description></item><item><title>The update/draw cycle</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02state/updateDrawCycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02state/updateDrawCycle/</guid><description>In Pygame Zero, as with most game engines, the code that manages the game state is separate from the code that handles the display. In Pygame Zero, there are two main functions:
update(), which responds to inputs and manages the game state, and draw(), which coordinates updating the screen to match the game state. stateDiagram-v2
direction LR
[*] --> update()
update() --> draw()
draw() --> update()
Where possible, these two functions will be run, update then draw, update then draw, 60 times per second.</description></item><item><title>Basic game walkthrough</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/basicGameWalkthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/basicGameWalkthrough/</guid><description>This is a nine-part walkthrough to set up a very basic game. Most of the videos are about 5 mins long.
Make a player Move the player Make a target Randomise the target Collect the target Keep the score Display the score Make multiple targets A comment on comments</description></item><item><title>Starter code</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/baseCode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/baseCode/</guid><description>This is a good base to use at the top of each of your projects.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #!/usr/bin/env pybricks-micropython from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port, Stop from pybricks.</description></item><item><title>More walk-throughs</title><link>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/moreTutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/03walkthroughs/moreTutorials/</guid><description>Simple Game Tutorials for Python and Pygame Zero 1.2</description></item><item><title>Resources</title><link>https://tmcdigitech.github.io/dit8/gameDesign/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/resources/</guid><description>Online tools and resources PNG Tools - Transparent, crop, convert
Bensound - background music
mixkit - sound effects Photo Editor
Pixilart
Kenney - free game assets</description></item><item><title/><link>https://tmcdigitech.github.io/dit8/gameDesign/02state/maintainingState/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02state/maintainingState/</guid><description/></item><item><title>argument</title><link>https://tmcdigitech.github.io/dit8/glossary/argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/argument/</guid><description>When calling a function, the values given to it are called arguments. For example, in this case:
total = add(3, 4) 3 and 4 are arguments to the function add().
When defining a function, the pieces of information that the function takes to do its job are called parameters.</description></item><item><title>Backgrounds</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/backgrounds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/backgrounds/</guid><description/></item><item><title>co-ordinate system</title><link>https://tmcdigitech.github.io/dit8/glossary/coordinate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/coordinate/</guid><description>In most programming environments (such as Pygame Zero), the screen co-ordinate system uses (x, y) co-ordinates, with the origin (0, 0) in the top left corner of the screen, with x to the right, and y going down.
Everything to be displayed on the screen must be rastered, which means rendered into a grid of colored pixels.</description></item><item><title>color/colour</title><link>https://tmcdigitech.github.io/dit8/glossary/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/color/</guid><description>In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.
For most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0-255. In Pygame Zero, we list these as a tuple (red, green, blue), such as:
(0, 150, 255) You can use the Google Color Picker to find different colors, and then copy the RGB value listed.</description></item><item><title>Damage</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/damage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/damage/</guid><description/></item><item><title>Enchanted Scepters</title><link>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/EnchantedScepters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/EnchantedScepters/</guid><description>by Silicon Beach Software (1984)
In this part-illustrated, part-text adventure, you are tasked with recovering four magical sceptres (earth, fire, wind and water, of course) to save your kingdom from invasion.</description></item><item><title>Enemies</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/enemies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/enemies/</guid><description> Default Move Other Dead</description></item><item><title>Iago</title><link>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/Iago/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/Iago/</guid><description>by David Reed (1984)
Iago was a very early Othello/Reversi game, which offered excellent gameplay. You could play against a friend or a computer with three levels of difficulty, on three different sizes of board.
It even has a special feature to hide the game if you are playing it at work and your boss is coming&amp;hellip;</description></item><item><title>Items</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/items/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/items/</guid><description/></item><item><title>Lasers</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/lasers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/lasers/</guid><description/></item><item><title>Meteors</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/meteors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/meteors/</guid><description/></item><item><title>parameter</title><link>https://tmcdigitech.github.io/dit8/glossary/parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/parameter/</guid><description>When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:
def add(first, second): return first + second first and second are the parameters of the function add().
When calling a function, the values given to it are called arguments.</description></item><item><title>Phrase Craze</title><link>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/PhraseCraze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/PhraseCraze/</guid><description>by Brad Pettit (1986)
Borrowing heavily from the TV game show Wheel of Fortune, Phrase Craze offers up to four players the chance to relive the thrill of being on the set, complete with game board, wheel, and charming host. You could also modify the PhraseFile to create your own puzzles.</description></item><item><title>Players</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/players/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/players/</guid><description> Stand Front Walk1 Walk2 Swim1 Swim2 Climb1 Climb2 Hit Duck Jump</description></item><item><title>Power-ups</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/powerups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/powerups/</guid><description/></item><item><title>Ships</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/ships/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/ships/</guid><description/></item><item><title>Site URL 🡄🡆</title><link>https://tmcdigitech.github.io/dit8/teaching/siteUrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/teaching/siteUrl/</guid><description>Learn about Pygame Zero here:
https://tmcdigitech.github.io/dit8/</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit8/gameDesign/01gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/01gettingStarted/software/</guid><description>To develop games using Pygame Zero, you have two main options:
use Mu use another editor Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generaly very friendly to use and has a lot of features to help beginners get started.
After you have been writing code for a while, you may find that a standard Python environment and a &amp;ldquo;full&amp;rdquo; text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of doing some more basic things yourself.</description></item><item><title>Sounds</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/sounds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsPlatform/sounds/</guid><description> Digital Audio Interface Sounds UI Audio Sci-Fi Sounds</description></item><item><title>Structuring your files</title><link>https://tmcdigitech.github.io/dit8/gameDesign/01gettingStarted/fileStructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/01gettingStarted/fileStructure/</guid><description>Each of your projects should live in its own folder somewhere sensible (like in a Digital Tech folder in your OneDrive!).
Digital Tech/ │ ├── firstGame/ │ └── game.py │ ├── secondGame/ │ └── game.py │ ├── thirdGame/ │ └── game.py │ └── fourthGame/ └── game.py Within each of those folders, there will be python file with your game code in it, but there may well be other files and folders as well.</description></item><item><title>StuntCopter</title><link>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/StuntCopter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/inspiration/StuntCopter/</guid><description>by Duane Blehm (1986)
Part of the genius of this game is how simple it is. Your aim is to drop people out of a helicopter onto the cart, carefully avoiding the rider and the horse. The further up you drop from, the more points you get. See what happens when you drop someone through the clouds&amp;hellip;
If you go to Options &amp;gt; OffScreen in the menu, you can also see the complete sprite sheet for the game; a nice touch.</description></item><item><title>tuple</title><link>https://tmcdigitech.github.io/dit8/glossary/tuple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/glossary/tuple/</guid><description>A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but in Pygame Zero we use them most often for colors (red, green, blue) and co-ordinates (x, y).</description></item><item><title>UI</title><link>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/ui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/gameDesign/02basics/assetsSpace/ui/</guid><description/></item><item><title>Why won't my program work?</title><link>https://tmcdigitech.github.io/dit8/troubleshooting/01whybroken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/troubleshooting/01whybroken/</guid><description>Here is a checklist of things to look for if something is wrong&amp;hellip;
Spelling and Capitalisation Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.</description></item></channel></rss>