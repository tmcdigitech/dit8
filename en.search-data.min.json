[{"id":0,"href":"/dit8/gameDesign/03walkthroughs/gemCatcher/","title":"Gem Catcher","parent":"Walk-throughs","content":" First program update() Adding a gem Collision and Random Keeping Score Mouse and Events Game Over Challenges  "},{"id":1,"href":"/dit8/robotics/gettingStarted/","title":"Getting Started","parent":"Robotics","content":""},{"id":2,"href":"/dit8/gameDesign/01gettingStarted/","title":"Getting started","parent":"Game Design","content":""},{"id":3,"href":"/dit8/gameDesign/02basics/python/","title":"Python","parent":"Learning the basics","content":"If you are new to Python, here is an good interactive guide you can get started with:\nAposteriori: Introduction to Python\n"},{"id":4,"href":"/dit8/robotics/","title":"Robotics","parent":"8 DigiTech","content":""},{"id":5,"href":"/dit8/robotics/gettingStarted/software/","title":"Software","parent":"Getting Started","content":"To control the LEGO Mindstorms robots running ev3dev, you will need to:\n  Open the Company Portal:   Find and install Visual Studio Code (NOT Visual Studio Community):   Install the EV3 MicroPython extension   "},{"id":6,"href":"/dit8/gameDesign/","title":"Game Design","parent":"8 DigiTech","content":""},{"id":7,"href":"/dit8/gameDesign/02basics/","title":"Learning the basics","parent":"Game Design","content":""},{"id":8,"href":"/dit8/gameDesign/03walkthroughs/ninjaRunner/","title":"Ninja Runner","parent":"Walk-throughs","content":" Infinite Runner Background Ninja Jumping Obstacles Keeping Score Game Over Challenges and Bugs  "},{"id":9,"href":"/dit8/gameDesign/02basics/pygameZero/","title":"Pygame Zero","parent":"Learning the basics","content":"Let\u0026rsquo;s get a simple game happening, a bit at a time, so you can see how you might go about it yourself.\nAll of these examples are complete programs, so make sure you copy them into Mu (or whatever editor you\u0026rsquo;re using) and run them as you go through this page.\nScreen size    Let\u0026rsquo;s start by setting the size of the screen.\n1 2 3 4 5 6  import pgzrun WIDTH = 800 HEIGHT = 600 pgzrun.go() # Must be last line   Background    Now let\u0026rsquo;s add a coloured background. To do this we need to define a function called draw(), which Pygame Zero will call every time it needs to redraw the screen:\n1 2 3 4 5 6 7 8 9  import pgzrun WIDTH = 800 HEIGHT = 600 def draw(): screen.fill((128, 0, 0)) pgzrun.go() # Must be last line   Why the double brackets?\nNotice that we had to use two sets of brackets in that example to set the colour of the background. In Pygame Zero, colours are always written as a set of three numbers like this: (0, 130, 255), which in Python is called a tuple (rhyming with \u0026lsquo;couple\u0026rsquo;). A tuple is indicated with round brackets. But the function also takes a set of round brackets, so we know it is a function. So the outer set of brackets belongs to the fill() function call, and the inside set to the tuple for the colour.  Basic shapes    Let\u0026rsquo;s add a couple of basic shapes.\n1 2 3 4 5 6 7 8 9 10  import pgzrun WIDTH = 800 HEIGHT = 600 def draw(): screen.fill((128, 0, 0)) screen.draw.filled_circle((0,150), 10, (200, 100, 200))  pgzrun.go() # Must be last line   The filled_circle() command takes three bits of information, known as arguments:\n the co-ordinates of the circle\u0026rsquo;s centre (x, y) as a tuple, the radius, the colour (r, g, b) as a tuple.  "},{"id":10,"href":"/dit8/robotics/gettingStarted/using/","title":"Using the EV3","parent":"Getting Started","content":"Taken from pybricks.com\nTurning the EV3 Brick on and off    Turn on the EV3 Brick by pressing the dark gray center button.\nThe boot process may take several minutes. While booting, the EV3 Brick status light turns orange and blinks intermittently, and you’ll see a lot of text on the EV3 screen. The EV3 Brick is ready for use when the status light turns green.\nTo turn the EV3 Brick off, open the shutdown menu with the back button, and then select Power Off using the center button, as shown in Figure 5.\n Figure 5: Turning the EV3 Brick off   Viewing motor and sensor values    When you’re not running a program, you can view motor and sensor values using the device browser, as shown in Figure 6.\n Figure 6: Viewing motor and sensor values   Running a program without a computer    You can run previously downloaded programs directly from the EV3 Brick.\nTo do so, find the program using the file browser on the EV3 screen and press the center button key to start the program as shown in Figure 7.\n Figure 7: Starting a program using the buttons on the EV3 Brick   "},{"id":11,"href":"/dit8/robotics/gettingStarted/programs/","title":"Creating and running programs","parent":"Getting Started","content":"Taken from pybricks.com\n Now that you’ve set up your computer and EV3 Brick, you’re ready to start writing programs.\nTo make it easier to create and manage your programs, let’s first have a quick look at how MicroPython projects and programs for your EV3 robots are organized.\nPrograms are organized into project folders, as shown in Figure 8. A project folder is a directory/folder on your computer that contains the main program (main.py) and other optional scripts or files. This project folder and all of its contents will be copied to the EV3 Brick, where the main program will be run.\nThis page shows you how to create such a project and how to transfer it to the EV3 Brick.\n Figure 8: A project contains a program called main.py and optional resources like sounds or MicroPython modules.   Creating a new project    To create a new project, open the EV3 MicroPython tab and click create a new project, as shown in Figure 9. Enter a project name in the text field that appears and press Enter. When prompted, choose a location for this program and confirm by clicking choose folder.\n Figure 9: Creating a new project. This example is called getting_started, but you can choose any name.   When you create a new project, it already includes a file called main.py. To see its contents and to modify it, open it from the file browser as shown in Figure 10. This is where you’ll write your programs.\nIf you are new to MicroPython programming, we recommend that you keep the existing code in place and add your code to it.\n Figure 10: Opening the default main.py program.   Opening an existing project    To open a project you created previously, click File and click Open Folder, as shown in Figure 11. Next, navigate to your previously created project folder and click OK. You can also open your recently used projects using the Open Recent menu option.\n Figure 11: Opening a previously created project.   Connecting to the EV3 Brick with Visual Studio Code    To be able to transfer your code to the EV3 Brick, you’ll first need to connect the EV3 Brick to your computer with the mini-USB cable and configure the connection with Visual Studio Code. To do so:\n Turn the EV3 Brick on Connect the EV3 Brick to your computer with the mini-USB cable Configure the USB connection as shown in Figure 12.   Figure 12: Configuring the USB connection between the computer and the EV3 Brick   Downloading and running a program    You can press the F5 key to run the program. Alternatively, you can start it manually by going to the debug tab and clicking the green start arrow, as shown in Figure 13.\nWhen the program starts, a pop-up toolbar allows you to stop the program if necessary. You can also stop the program at any time using the back button on the EV3 Brick.\nIf your program produces any output with the print command, this is shown in the output window.\n Figure 13: Running a program   Expanding the example program    Now that you’ve run the basic code template, you can expand the program to make a motor move. First, attach a Large Motor to Port B on the EV3 Brick, as shown in Figure 14.\n Figure 14: The EV3 Brick with a Large Motor attached to port B.   Next, edit main.py to make it look like this:\n#!/usr/bin/env pybricks-micropython from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port # Create your objects here # Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize a motor at port B. test_motor = Motor(Port.B) # Write your program here # Play a sound. ev3.speaker.beep() # Run the motor up to 500 degrees per second. To a target angle of 90 degrees. test_motor.run_target(500, 90) # Play another beep sound. ev3.speaker.beep(frequency=1000, duration=500) This program makes your robot beep, rotate the motor, and beep again with a higher pitched tone. Run the program to make sure that it works as expected.\nManaging files on the EV3 Brick    After you’ve downloaded a project to the EV3 Brick, you can run, delete, or back up programs stored on it using the device browser as shown in Figure 15.\n Figure 15: Using the EV3 device browser to manage files on your EV3 Brick   "},{"id":12,"href":"/dit8/gameDesign/03walkthroughs/tankGame/","title":"Tanks","parent":"Walk-throughs","content":" Battle City 1985 Tank Moving the tank Background and Walls Randomizing the Walls Blocking Movements Tank Cannon Destroying Walls One Enemy Enemy Bullets Many Enemies Winning and Losing  "},{"id":13,"href":"/dit8/gameDesign/03walkthroughs/","title":"Walk-throughs","parent":"Game Design","content":""},{"id":14,"href":"/dit8/gameDesign/03walkthroughs/chaseGame/","title":"Chase game","parent":"Walk-throughs","content":"Chase game\n"},{"id":15,"href":"/dit8/robotics/gettingStarted/structure/","title":"Structure of program","parent":"Getting Started","content":"For obscure, historical reasons, the first line must look exactly like this. If it doesn\u0026rsquo;t, your program won\u0026rsquo;t work at all. Accidentally adding a blank line above or a space before is a common reason your code will break.\n1  #!/usr/bin/env pybricks-micropython    The next lines are some explanatory text about what the program in this file does. It is a good habit to do this in Python, but your program will work if you don\u0026rsquo;t.\n3 4 5 6 7 8 9 10 11 12  \u0026#34;\u0026#34;\u0026#34; Example LEGO® MINDSTORMS® EV3 Robot Educator Driving Base Program ----------------------------------------------------------------- This program requires LEGO® EV3 MicroPython v2.0. Download: https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3 Building instructions can be found at: https://education.lego.com/en-us/support/mindstorms-ev3/building-instructions#robot \u0026#34;\u0026#34;\u0026#34;    Now we need to import some extra code from the library, so that the computer knows how to drive the various parts of the EV3. Libraries are collections of useful code which are used by lots of different people, but not all the time.\n14 15 16 17 18 19  from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port, Stop from pybricks.robotics import DriveBase from pybricks.tools import wait from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor, InfraredSensor, UltrasonicSensor, GyroSensor)    We need to tell the computer that we\u0026rsquo;re using an EV3 brick (which might seem a bit weird, since the computer is itself trapped in an EV3 brick, but never mind), and what we\u0026rsquo;ve connected to it.\nIf this part differs from what you\u0026rsquo;ve actually wired up, your code won\u0026rsquo;t work.\n21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  # Initialize the EV3 Brick.  ev3 = EV3Brick() # Initialize the motors.  left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the Touch Sensor.  touch_sensor = TouchSensor(Port.S1) # Initialize the Colour Sensor.  color_sensor = ColorSensor(Port.S3) # Initialize the ultrasonic sensor.  ultrasonic_sensor = UltrasonicSensor(Port.S4)    DriveBase is a handy addition which allows us to drive two motors as though they were a car. We need to tell the computer:\n which motor is the left motor, which motor is the right motor, what the diameter of the wheels is, so it can work out how many times to turn the wheels to go a given distance, what the track (the distance between the wheels) is, so it can work out how far to turn the wheels to rotate the robot a given angle.  37 38  # Initialize the drive base.  robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104)   The robot is now set up and ready to go. You can add your code to the bottom of the file.\n40  # Write your program here.   Complete program    Finally, here is the complete code, to make copying it easier:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  #!/usr/bin/env pybricks-micropython  \u0026#34;\u0026#34;\u0026#34; Example LEGO® MINDSTORMS® EV3 Robot Educator Driving Base Program ----------------------------------------------------------------- This program requires LEGO® EV3 MicroPython v2.0. Download: https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3 Building instructions can be found at: https://education.lego.com/en-us/support/mindstorms-ev3/building-instructions#robot \u0026#34;\u0026#34;\u0026#34; from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port from pybricks.robotics import DriveBase from pybricks.tools import wait from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor, InfraredSensor, UltrasonicSensor, GyroSensor) # Initialize the EV3 Brick.  ev3 = EV3Brick() # Initialize the motors.  left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the Touch Sensor.  touch_sensor = TouchSensor(Port.S1) # Initialize the Colour Sensor.  color_sensor = ColorSensor(Port.S3) # Initialize the ultrasonic sensor.  ultrasonic_sensor = UltrasonicSensor(Port.S4) # Initialize the drive base.  robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) # Write your program here.   "},{"id":16,"href":"/dit8/gameDesign/03walkthroughs/mazeGame/","title":"Maze game","parent":"Walk-throughs","content":"Maze game\nIntroduces tile maps\n"},{"id":17,"href":"/dit8/robotics/gettingStarted/movement/","title":"Movement","parent":"Getting Started","content":"adapted from PyBricks\nSet up    Having to control the two motors independently to move our robot would involve a lot of maths and be annoying and prone to error. Instead, we can use the DriveBase class to make driving our robot around a lot simpler.\nWe still need to initialize the motors:\n# Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) But then we write this to create our DriveBase:\n# Initialize the drive base. robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) By specifying the dimensions of your robot, this class makes it easy to drive a given distance in millimeters or turn by a given number of degrees.\nPositive distances, radii, or drive speeds mean driving forward. Negative means backward.\nPositive angles and turn rates mean turning right. Negative means left. So when viewed from the top, positive means clockwise and negative means counterclockwise.\nParameters:\n left_motor, the motor that drives the left wheel. right_motor, the motor that drives the right wheel. wheel_diameter, diameter of the wheels in millimetres (mm). axle_track, distance between the points where both wheels touch the ground, in millimetres (mm).  Driving for a given distance or by an angle    Use the following commands to drive a given distance, or turn by a given angle. This is measured using the internal rotation sensors. Because wheels may slip while moving, the travelled distance and angle are only estimates.\nIf you initialized your robot using the line:\nrobot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) you will control it using:\nrobot.straight(300) robot.turn(-45) and so on. If instead you\u0026rsquo;d written:\nsuperchamp = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104) you will control it using:\nsuperchamp.straight(300) superchamp.turn(-45) and so on.\n  straight(distance)    Drives straight for a given distance and then stops.\nParameters:\n distance, distance to travel in millimetres (mm).   turn(angle)    Turns in place by a given angle and then stops.\nParameters:\n angle, angle to turn in degrees (°).   curve(radius, angle)    Drives an arc along a circle of a given radius, by a given angle.\nParameters: radius (dimension: mm) – Radius of the circle. angle (angle: deg) – Angle along the circle.\nDrive forever    drive(drive_speed, turn_rate)    Starts driving at the specified speed and turn rate. Both values are measured at the center point between the wheels of the robot. It keeps going until you use stop() or change course by using drive() again. For example, you can drive until a sensor is triggered and then stop or turn around.\nParameters:\n drive_speed, speed of the robot in millimetres per second (mm/s). turn_rate, turn rate of the robot in degrees per second (°/s).   stop()    Stops the robot by letting the motors spin freely.\n## Example Movement Code  # Go forward and backwards for one metre. robot.straight(1000) robot.straight(-1000) # Set the drive base speed and turn rate. It keeps going until you use stop() robot.drive(100, 0) # Turn clockwise by 360 degrees and back again.  robot.turn(360) robot.turn(-360) # stop the motor robot.stop() # this stops any active movement and actively brakes the motor  # from pybricks.parameters import Port, Stop robot.stop(Stop.BRAKE) # this stops any active movement and leaves the motors on coast robot.stop(Stop.COAST) # Stops the motor and actively holds it at its current angle. Make sure you include Stop in  # from pybricks.parameters import Port, Stop robot.stop(Stop.HOLD) "},{"id":18,"href":"/dit8/gameDesign/03walkthroughs/shootingGame/","title":"Shooting game","parent":"Walk-throughs","content":"Shooting game\n"},{"id":19,"href":"/dit8/robotics/gettingStarted/touch/","title":"Touch Sensor","parent":"Getting Started","content":"adapted from PyBricks  Touch Sensor   A sensor lets an EV3 program measure and collect data about is surroundings. The Touch Sensor can detect when the sensor’s red button has been pressed or released.\nExample Code    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #!/usr/bin/env pybricks-micropython from pybricks import ev3brick as brick from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor, InfraredSensor, UltrasonicSensor, GyroSensor) from pybricks.parameters import (Port, Stop, Direction, Button, Color, SoundFile, ImageFile, Align) from pybricks.tools import print, wait, StopWatch from pybricks.robotics import DriveBase # Initialize Touch Sensor touch_sensor = TouchSensor(Port.S1) # Initialize two motors and a drive base left = Motor(Port.B) right = Motor(Port.C) robot = DriveBase(left, right, 56, 114) # Drive forward until touch sensor is pressed robot.drive(1000, 0) while not touch_sensor.pressed(): wait(1) robot.stop()   "},{"id":20,"href":"/dit8/gameDesign/03walkthroughs/racingGame/","title":"Racing game","parent":"Walk-throughs","content":"Racing game\n"},{"id":21,"href":"/dit8/robotics/gettingStarted/color/","title":"Color Sensor","parent":"Getting Started","content":"adapted from PyBricks  Color Sensor   In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.  A sensor lets an EV3 program measure and collect data about is surroundings. The Color Sensor can detect color and reflected light.\nThree modes: Color, Reflected Light intensity and Ambient Light intensity.\n– Color Mode: Recognizes 7 colors (black, brown, blue, green, yellow, red, white) and No Color\n– Reflected Light: Measures the intensity of the light reflected back from a lamp that emits a red light. (0=very dark and 100=very light)\n– Ambient Light: Measures the strength of the light that enters the sensor from the environment. (0=very dark and 100=very light)\nExample Code    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/usr/bin/env pybricks-micropython from pybricks.hubs import EV3Brick from pybricks.ev3devices import Motor from pybricks.parameters import Port, Stop from pybricks.robotics import DriveBase from pybricks.tools import wait from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor, InfraredSensor, UltrasonicSensor, GyroSensor) # Initialize the EV3 Brick. ev3 = EV3Brick() # Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) # Initialize the drive base. robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104)   Here we initialize what sensors we would like by telling the EV3 what port it is plugged into and what we would like to call it when referring to it in our code. 18 19 20 21 22 23 24 25 26  # Initialize the sensors. line_sensor = ColorSensor(Port.S1)  # Go forward while reflected light is less than 10. ev3.speaker.beep() robot.drive(100,0) while line_sensor.reflection() \u0026lt; 10: wait(10) robot.stop()  \n"},{"id":22,"href":"/dit8/robotics/gettingStarted/flowcharts/","title":"Flowcharts","parent":"Getting Started","content":"Flowcharts are a visual representation of program flow. A flowchart normally uses a combination of blocks and arrows to represent actions and sequence. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.\nStart and End symbols are represented as rounded rectangles, usually containing the word \u0026ldquo;Star\u0026rdquo; or \u0026ldquo;End\u0026rdquo;, but can be more specific such as \u0026ldquo;Power Robot Off\u0026rdquo; or \u0026ldquo;Stop All Motors\u0026rdquo;.\nActions are represented as rectangles and act as basic commands. Examples: wait(10) increment LineCount by 1 motors full ahead\nDecision blocks are represented as diamonds. These typically contain Yes/No questions. Decision blocks have two or more arrows coming Out Of them, representing the different paths that can be followed, depending on the outcome Of the decision. The arrows should always be labelled accordingly.\nExample Flowchart    The following flowchart instructs a robot to run forward as long as its touch sensor is not pressed. When the touch sensor is pressed the motors stop and the program ends.\nExample Flowchart    The following flowchart instructs a robot to run forward as long as its color sensor reflected light is less than 10%. When the color sensor reflected light is greater than 10% the robot will stop.\n"},{"id":23,"href":"/dit8/robotics/gettingStarted/flowchartsOLD/","title":"Flowcharts-OLD","parent":"Getting Started","content":"Flowcharts are a visual representation of program flow. A flowchart normally uses a combination of blocks and arrows to represent actions and sequence. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.\n Color Sensor   A single track trail outside of Albuquerque, New Mexico.\nStart and End symbols are represented as rounded rectangles, usually containing the word \u0026ldquo;Star\u0026rdquo; or \u0026ldquo;End\u0026rdquo;, but can be more specific such as \u0026ldquo;Power Robot Off\u0026rdquo; or \u0026ldquo;Stop All Motors\u0026rdquo;.\n  Steve Francia   Actions are represented as rectangles and act as basic commands. Examples: wait(10) increment LineCount by 1 motors full ahead\nDecision blocks are represented as diamonds. These typically contain Yes/No questions. Decision blocks have two or more arrows coming Out Of them, representing the different paths that can be followed, depending on the outcome Of the decision. The arrows should always be labelled accordingly.\n"},{"id":24,"href":"/dit8/gameDesign/03walkthroughs/verticalShooter/","title":"Vertical shooter","parent":"Walk-throughs","content":" Twin Bee  "},{"id":25,"href":"/dit8/glossary/","title":"Glossary","parent":"8 DigiTech","content":""},{"id":26,"href":"/dit8/gameDesign/03walkthroughs/moreTutorials/","title":"More walk-throughs","parent":"Walk-throughs","content":"Simple Game Tutorials for Python and Pygame Zero 1.2\n"},{"id":27,"href":"/dit8/gameDesign/inspiration/","title":"Inspiration","parent":"Game Design","content":"Here is a selection of games which are over 30 years old, but which show that well thought out gameplay doesn\u0026rsquo;t need graphics to shine.\nMaybe one of these will inspire your next creation\u0026hellip;\n"},{"id":28,"href":"/dit8/troubleshooting/","title":"Troubleshooting","parent":"8 DigiTech","content":""},{"id":29,"href":"/dit8/reference/","title":"Reference materials","parent":"8 DigiTech","content":"Robotics     LEGO MicroPython Documentation LEGO Python for EV3 EV3 Tutorial  Game Design     Pygame Zero documentation Physics for Game Developers Teaching a kid to code with Pygame Zero  "},{"id":30,"href":"/dit8/teaching/","title":"Teaching materials","parent":"8 DigiTech","content":""},{"id":31,"href":"/dit8/","title":"8 DigiTech","parent":"","content":"Welcome to Year 8 Digital Technologies!\nThis semester we will work on two broad topics:\n autonomous robots using LEGO Mindstorms EV3s game design using PyGame Zero   A LEGO Mindstorms EV3 robot   "},{"id":32,"href":"/dit8/glossary/argument/","title":"argument","parent":"Glossary","content":"When calling a function, the values given to it are called arguments. For example, in this case:\ntotal = add(3, 4) 3 and 4 are arguments to the function add().\nWhen defining a function, the pieces of information that the function takes to do its job are called parameters.\n"},{"id":33,"href":"/dit8/categories/","title":"Categories","parent":"8 DigiTech","content":""},{"id":34,"href":"/dit8/glossary/coordinate/","title":"co-ordinate system","parent":"Glossary","content":"In most programming environments (such as Pygame Zero), the screen co-ordinate system uses (x, y) co-ordinates, with the origin (0, 0) in the top left corner of the screen, with x to the right, and y going down.\nEverything to be displayed on the screen must be rastered, which means rendered into a grid of colored pixels.\n"},{"id":35,"href":"/dit8/glossary/color/","title":"color/colour","parent":"Glossary","content":"In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.\nFor most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0-255. In Pygame Zero, we list these as a tuple (red, green, blue), such as:\n(0, 150, 255) You can use the Google Color Picker to find different colors, and then copy the RGB value listed.\n"},{"id":36,"href":"/dit8/gameDesign/inspiration/EnchantedScepters/","title":"Enchanted Scepters","parent":"Inspiration","content":"by Silicon Beach Software (1984)\nIn this part-illustrated, part-text adventure, you are tasked with recovering four magical sceptres (earth, fire, wind and water, of course) to save your kingdom from invasion.\n "},{"id":37,"href":"/dit8/gameDesign/inspiration/Iago/","title":"Iago","parent":"Inspiration","content":"by David Reed (1984)\nIago was a very early Othello/Reversi game, which offered excellent gameplay. You could play against a friend or a computer with three levels of difficulty, on three different sizes of board.\nIt even has a special feature to hide the game if you are playing it at work and your boss is coming\u0026hellip;\n "},{"id":38,"href":"/dit8/glossary/parameter/","title":"parameter","parent":"Glossary","content":"When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:\ndef add(first, second): return first + second first and second are the parameters of the function add().\nWhen calling a function, the values given to it are called arguments.\n"},{"id":39,"href":"/dit8/gameDesign/inspiration/PhraseCraze/","title":"Phrase Craze","parent":"Inspiration","content":"by Brad Pettit (1986)\nBorrowing heavily from the TV game show Wheel of Fortune, Phrase Craze offers up to four players the chance to relive the thrill of being on the set, complete with game board, wheel, and charming host. You could also modify the PhraseFile to create your own puzzles.\n "},{"id":40,"href":"/dit8/teaching/siteUrl/","title":"Site URL 🡄🡆","parent":"Teaching materials","content":"Learn about Pygame Zero here:\nhttps://tmcdigitech.github.io/dit8/\n"},{"id":41,"href":"/dit8/gameDesign/01gettingStarted/software/","title":"Software","parent":"Getting started","content":"To develop games using Pygame Zero, you have two main options:\n use Mu use another editor  Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generaly very friendly to use and has a lot of features to help beginners get started.\nAfter you have been writing code for a while, you may find that a standard Python environment and a \u0026ldquo;full\u0026rdquo; text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of doing some more basic things yourself.\nAn example of this is that Mu will automatically add the necessary first and last lines to your Pygame Zero file.\nThe very top line, line 1, must read:\nimport pgzrun And the very last line must read:\npgzrun.go() If you are using Mu, it will automatically add these lines if you forget. With VS Code or another editor, you will need to do this yourself.\nUsing Mu    Install Mu, using the Company Portal (on a school computer), or from the website. You\u0026rsquo;re done!\nThere is a beginner\u0026rsquo;s guide to Mu, if you want more help on how to use Mu.\nTo make games in Pygame Zero, make sure you select the mode Pygame Zero.\nUsing Visual Studio Code    From the Company Portal (on a school computer), or using the links below, install:\n Visual Studio Code Python  "},{"id":42,"href":"/dit8/gameDesign/01gettingStarted/fileStructure/","title":"Structuring your files","parent":"Getting started","content":"Each of your projects should live in its own folder somewhere sensible (like in a Digital Tech folder in your OneDrive!).\nproject/ ├── game.py │ ├── images/ │ ├── someImage.jpg │ ├── anotherImage.jpg │ └── ... # sprites, tiles and other image files │ ├── fonts/ │ └── ... # any font files │ ├── sounds/ │ └── ... # any sound files │ └── music/ └── ... # any music files You don\u0026rsquo;t need to have those folders unless you have something to put in them.\nCheck your version of Mu\nIf you are using a version of Mu older than 1.1.0-alpha.2, the shortcut buttons in Pygame Zero mode (Images, Sounds, Fonts and Music) will open folders in Mu\u0026rsquo;s default save location. If you have saved your project in a different location (like your OneDrive) you won\u0026rsquo;t be able to use these shortcut buttons, as they won\u0026rsquo;t open the right folders.\nFrom 1.1.0-alpha.2 onwards, the buttons will open folders relative to the file you have open, so they will always work, regardless of where you save your game file.\n "},{"id":43,"href":"/dit8/gameDesign/inspiration/StuntCopter/","title":"StuntCopter","parent":"Inspiration","content":"by Duane Blehm (1986)\nPart of the genius of this game is how simple it is. Your aim is to drop people out of a helicopter onto the cart, carefully avoiding the rider and the horse. The further up you drop from, the more points you get. See what happens when you drop someone through the clouds\u0026hellip;\nIf you go to Options \u0026gt; OffScreen in the menu, you can also see the complete sprite sheet for the game; a nice touch.\n "},{"id":44,"href":"/dit8/tags/","title":"Tags","parent":"8 DigiTech","content":""},{"id":45,"href":"/dit8/glossary/tuple/","title":"tuple","parent":"Glossary","content":"A tuple is a single unit of data made up of multiple values. In Python they are defined using round brackets, with commas separating the values. Tuples can contain all sorts of data as values, but in Pygame Zero we use them most often for colors (red, green, blue) and co-ordinates (x, y).\n"},{"id":46,"href":"/dit8/troubleshooting/01whybroken/","title":"Why won't my program work?","parent":"Troubleshooting","content":"Here is a checklist of things to look for if something is wrong\u0026hellip;\nSpelling and Capitalisation    Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.\n"}]