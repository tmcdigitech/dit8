<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on TMC - 8 Digital Tech</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/</link><description>Recent content in Getting Started on TMC - 8 Digital Tech</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit8/robotics/gettingStarted/index.xml" rel="self" type="application/rss+xml"/><item><title>Software</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/software/</guid><description>To control the LEGO Mindstorms robots running ev3dev, you will need to:
Open the Company Portal: Find and install Visual Studio Code (NOT Visual Studio Community): Install the EV3 MicroPython extension</description></item><item><title>Using the EV3</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/using/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/using/</guid><description>Taken from pybricks.com
Turning the EV3 Brick on and off Turn on the EV3 Brick by pressing the dark gray center button.
The boot process may take several minutes. While booting, the EV3 Brick status light turns orange and blinks intermittently, and you’ll see a lot of text on the EV3 screen. The EV3 Brick is ready for use when the status light turns green.
To turn the EV3 Brick off, open the shutdown menu with the back button, and then select Power Off using the center button, as shown in Figure 5.</description></item><item><title>Creating and running programs</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/programs/</guid><description>Taken from pybricks.com
Now that you’ve set up your computer and EV3 Brick, you’re ready to start writing programs.
To make it easier to create and manage your programs, let’s first have a quick look at how MicroPython projects and programs for your EV3 robots are organized.
Programs are organized into project folders, as shown in Figure 8. A project folder is a directory/folder on your computer that contains the main program (main.</description></item><item><title>Structure of program</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/structure/</guid><description>For obscure, historical reasons, the first line must look exactly like this. If it doesn&amp;rsquo;t, your program won&amp;rsquo;t work at all. Accidentally adding a blank line above or a space before is a common reason your code will break.
1 #!/usr/bin/env pybricks-micropython The next lines are some explanatory text about what the program in this file does. It is a good habit to do this in Python, but your program will work if you don&amp;rsquo;t.</description></item><item><title>Movement</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/movement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/movement/</guid><description>adapted from PyBricks
Set up Having to control the two motors independently to move our robot would involve a lot of maths and be annoying and prone to error. Instead, we can use the DriveBase class to make driving our robot around a lot simpler.
We still need to initialize the motors:
# Initialize the motors. left_motor = Motor(Port.B) right_motor = Motor(Port.C) But then we write this to create our DriveBase:</description></item><item><title>Touch Sensor</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/touch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/touch/</guid><description>adapted from PyBricks Touch Sensor A sensor lets an EV3 program measure and collect data about is surroundings. The Touch Sensor can detect when the sensor’s red button has been pressed or released.
Example Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env pybricks-micropython from pybricks import ev3brick as brick from pybricks.</description></item><item><title>Ultrasonic Sensor</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/ultrasonic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/ultrasonic/</guid><description>adapted from PyBricks Ultrasonic Sensor The Ultrasonic Sensor is digital sensor that can measure the distance to an Object in front of it. It does this by sending out hight frequency sound waves and measuring how long it takes the sound to reflect back to the sensor. The sound frequency is too high for you to hear. Distance to an object is measured in millimeters (mm). This allows you to program your robot to stop at a certain distance from a wall.</description></item><item><title>Color Sensor</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/color/</guid><description>adapted from PyBricks Color Sensor In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours. A sensor lets an EV3 program measure and collect data about is surroundings. The Color Sensor can detect color and reflected light.
Three modes: Color, Reflected Light intensity and Ambient Light intensity.
– Color Mode: Recognizes 7 colors (black, brown, blue, green, yellow, red, white) and No Color</description></item><item><title>Flowcharts</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/flowcharts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/flowcharts/</guid><description>Flowcharts are a visual representation of program flow. A flowchart normally uses a combination of blocks and arrows to represent actions and sequence. Blocks typically represent actions. The order in which actions occur is shown using arrows that point from statement to statement. Sometimes a block will have multiple arrows coming out of it, representing a step where a decision must be made about which path to follow.
Start and End symbols are represented as rounded rectangles, usually containing the word &amp;ldquo;Star&amp;rdquo; or &amp;ldquo;End&amp;rdquo;, but can be more specific such as &amp;ldquo;Power Robot Off&amp;rdquo; or &amp;ldquo;Stop All Motors&amp;rdquo;.</description></item><item><title>Programming Constructs</title><link>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/constructs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit8/robotics/gettingStarted/constructs/</guid><description>Programs are designed using common building blocks. These building blocks, known as programming constructs (or programming concepts), form the basis for all programs.
There are three basic building blocks to consider:
sequence is the order in which instructions occur and are processed selection determines which path a program takes when it is running iteration is the repeated execution of a section of code when a program is running Sequence Sequence is the order in which programming statements are executed.</description></item></channel></rss>